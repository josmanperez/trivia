{"ast":null,"code":"var _jsxFileName = \"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\"; // Realm\n\nimport * as Realm from \"realm-web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const APP_ID = \"triviaflexible-zuyoo\";\nexport const app = new Realm.App({\n  id: APP_ID\n}); // Gets a valid Realm user access token to authenticate requests\n\nasync function getValidAccessToken() {\n  // Guarantee that there's a logged in user with a valid access token\n  if (!app.currentUser) {\n    // If no user is logged in, log in an anonymous user. Tnodehe logged in user will have a valid\n    // access token.\n    return \"\";\n  } else {\n    // An already logged in user's access token might be stale. To guarantee that the token is\n    // valid, we refresh the user's custom data which also refreshes their access token.\n    await app.currentUser.refreshCustomData();\n  }\n\n  return app.currentUser.accessToken;\n} // Construct a new Apollo HttpLink that connects to your app's GraphQL endpoint\n\n\nconst graphql_url = `https://eu-west-1.aws.realm.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`; // Configure the ApolloClient to connect to your app's GraphQL endpoint\n\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: graphql_url,\n    // We define a custom fetch handler for the Apollo client that lets us authenticate GraphQL requests.\n    // The function intercepts every Apollo HTTP request and adds an Authorization header with a valid\n    // access token before sending the request.\n    fetch: async (uri, options) => {\n      const accessToken = await getValidAccessToken();\n      options.headers.Authorization = `Bearer ${accessToken}`;\n      return fetch(uri, options);\n    }\n  }),\n  cache: new InMemoryCache()\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 51,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"names":["React","ReactDOM","App","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","Realm","APP_ID","app","id","getValidAccessToken","currentUser","refreshCustomData","accessToken","graphql_url","client","link","uri","fetch","options","headers","Authorization","cache","render","document","getElementById"],"sources":["/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { \n  ApolloProvider,\n  ApolloClient, \n  HttpLink, \n  InMemoryCache } from \"@apollo/client\";\n\n// Realm\nimport * as Realm from \"realm-web\";\nexport const APP_ID = \"triviaflexible-zuyoo\";\nexport const app = new Realm.App({ id: APP_ID });\n\n// Gets a valid Realm user access token to authenticate requests\nasync function getValidAccessToken() {\n  // Guarantee that there's a logged in user with a valid access token\n  if (!app.currentUser) {\n    // If no user is logged in, log in an anonymous user. Tnodehe logged in user will have a valid\n    // access token.\n    return \"\";\n  } else {\n    // An already logged in user's access token might be stale. To guarantee that the token is\n    // valid, we refresh the user's custom data which also refreshes their access token.\n    await app.currentUser.refreshCustomData();\n  }\n  return app.currentUser.accessToken\n}\n\n// Construct a new Apollo HttpLink that connects to your app's GraphQL endpoint\nconst graphql_url = `https://eu-west-1.aws.realm.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`;\n\n// Configure the ApolloClient to connect to your app's GraphQL endpoint\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: graphql_url,\n    // We define a custom fetch handler for the Apollo client that lets us authenticate GraphQL requests.\n    // The function intercepts every Apollo HTTP request and adds an Authorization header with a valid\n    // access token before sending the request.\n    fetch: async (uri, options) => {\n      const accessToken = await getValidAccessToken();\n      options.headers.Authorization = `Bearer ${accessToken}`;\n      return fetch(uri, options);\n    },\n  }),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SACEC,cADF,EAEEC,YAFF,EAGEC,QAHF,EAIEC,aAJF,QAIuB,gBAJvB,C,CAMA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,WAAvB;;AACA,OAAO,MAAMC,MAAM,GAAG,sBAAf;AACP,OAAO,MAAMC,GAAG,GAAG,IAAIF,KAAK,CAACL,GAAV,CAAc;EAAEQ,EAAE,EAAEF;AAAN,CAAd,CAAZ,C,CAEP;;AACA,eAAeG,mBAAf,GAAqC;EACnC;EACA,IAAI,CAACF,GAAG,CAACG,WAAT,EAAsB;IACpB;IACA;IACA,OAAO,EAAP;EACD,CAJD,MAIO;IACL;IACA;IACA,MAAMH,GAAG,CAACG,WAAJ,CAAgBC,iBAAhB,EAAN;EACD;;EACD,OAAOJ,GAAG,CAACG,WAAJ,CAAgBE,WAAvB;AACD,C,CAED;;;AACA,MAAMC,WAAW,GAAI,+DAA8DP,MAAO,UAA1F,C,CAEA;;AACA,OAAO,MAAMQ,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;EACrCa,IAAI,EAAE,IAAIZ,QAAJ,CAAa;IACjBa,GAAG,EAAEH,WADY;IAEjB;IACA;IACA;IACAI,KAAK,EAAE,OAAOD,GAAP,EAAYE,OAAZ,KAAwB;MAC7B,MAAMN,WAAW,GAAG,MAAMH,mBAAmB,EAA7C;MACAS,OAAO,CAACC,OAAR,CAAgBC,aAAhB,GAAiC,UAASR,WAAY,EAAtD;MACA,OAAOK,KAAK,CAACD,GAAD,EAAME,OAAN,CAAZ;IACD;EATgB,CAAb,CAD+B;EAYrCG,KAAK,EAAE,IAAIjB,aAAJ;AAZ8B,CAAjB,CAAf;AAePL,QAAQ,CAACuB,MAAT,eACE,QAAC,cAAD;EAAgB,MAAM,EAAER,MAAxB;EAAA,uBACE,QAAC,GAAD;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,EAIES,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF"},"metadata":{},"sourceType":"module"}