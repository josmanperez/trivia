{"ast":null,"code":"var _jsxFileName = \"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Questions.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useState from 'react-usestateref';\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_QUESTIONS } from '../graphql-operations';\nimport he from 'he';\nimport { app } from \"../index\";\nimport { Modal, Button, Spinner, ListGroup } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questions(props) {\n  _s();\n\n  const {\n    play,\n    setPlay,\n    category,\n    setShowLastGame\n  } = props;\n  const [questionCounter, setQuestionCounter] = React.useState(-1);\n  const [questionArray, setQuestionArray] = React.useState([]);\n  const [numberOfQuestions] = React.useState(10); // TODO: De momento es un valor fijo, pero podrÃ­a ser variable como en iOS\n\n  var [asserts, setAsserts, refAsserts] = useState(0);\n  var [fails, setFails, refFails] = useState(0);\n  var answerArray = [];\n  const [startTime, setStartTime] = React.useState(new Date());\n  const [counting, setCounting] = React.useState(false); // Get Stock via GraphQL and update 'stock' value\n\n  const {\n    loading,\n    data\n  } = useQuery(FIND_QUESTIONS, {\n    variables: {\n      query: {\n        _partition: category.questions_partition\n      }\n    }\n  });\n\n  const updateUser = async time => {\n    try {\n      const game = {\n        category: category.title,\n        asserts: refAsserts.current,\n        fails: refFails.current,\n        date: new Date(),\n        timeElapsed: time\n      };\n      const user = app.currentUser;\n\n      if (user.id === app.currentUser.id) {\n        await app.currentUser.functions.addNewGame(game);\n      } // await updateUserGame({\n      //     variables: {\n      //         query: {_id: app.currentUser.id},\n      //         set: { games: game }\n      //     }\n      // });\n\n    } catch (error) {\n      console.error(\"Issue uppdating user game:\", error);\n    }\n  };\n\n  const handleClose = () => {\n    setQuestionArray([]);\n    setPlay(false);\n  };\n\n  const questions = data ? data.questions : null;\n\n  function start() {\n    setStartTime(new Date());\n  }\n\n  ;\n\n  function end() {\n    const endTime = new Date();\n    var timeDiff = endTime - startTime; //in ms\n    // strip the ms\n\n    timeDiff /= 1000; // get seconds \n\n    var seconds = Math.round(timeDiff);\n    return seconds;\n  }\n\n  function randomUniqueNum(range, outputCount) {\n    let arr = [];\n\n    for (let i = 1; i <= range; i++) {\n      arr.push(i);\n    }\n\n    let result = [];\n\n    for (let i = 1; i <= outputCount; i++) {\n      const random = Math.floor(Math.random() * (range - i));\n      result.push(arr[random]);\n      arr[random] = arr[range - i];\n    }\n\n    return result;\n  }\n\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      // Generate random number \n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  }\n\n  function createArrayOfQuestions() {\n    let array = [];\n    array.push(questionArray[questionCounter].correct_answer);\n    array = array.concat(questionArray[questionCounter].incorrect_answers);\n    shuffleArray(array);\n    return array;\n  }\n\n  function addAnswer(question) {\n    answerArray.push(question);\n  }\n\n  function drawQuestion(question) {\n    return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      as: \"li\",\n      eventKey: question,\n      action: true,\n      onClick: () => addAnswer(question),\n      children: he.decode(question)\n    }, question, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n\n  function displayQuestion() {\n    const q = createArrayOfQuestions();\n\n    if (!counting) {\n      setCounting(true);\n      start();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: he.decode(questionArray[questionCounter].question)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        variant: \"flush\",\n        as: \"ul\",\n        children: q && q.map(question => {\n          return drawQuestion(question);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this);\n  }\n\n  function setNextButton() {\n    const lastAnswer = answerArray.pop();\n\n    if (lastAnswer === questionArray[questionCounter].correct_answer) {\n      setAsserts(asserts => asserts + 1);\n    } else {\n      setFails(fails => fails + 1);\n    }\n\n    if (questionCounter < numberOfQuestions - 1) {\n      setQuestionCounter(questionCounter < numberOfQuestions ? questionCounter + 1 : 0);\n    } else {\n      const time = end();\n      updateUser(time).then(() => {\n        handleClose();\n        setShowLastGame(true);\n      }).catch(() => {\n        alert(\"An error occured\");\n        handleClose();\n      });\n    }\n  }\n\n  function setButton() {\n    if (questionCounter === -1) {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        onClick: () => setQuestionCounter(questionCounter + 1),\n        children: \"START!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"info\",\n        onClick: () => setNextButton(),\n        children: [\"Next \", numberOfQuestions - questionCounter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  function createQuestions() {\n    if (!questionArray.length) {\n      const indexArray = randomUniqueNum(questions.length - 1, numberOfQuestions);\n\n      for (var index in indexArray) {\n        questionArray.push(questions[indexArray[index]]);\n      }\n    } else {\n      return displayQuestion();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: play,\n    onHide: handleClose,\n    backdrop: \"static\",\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: category.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        className: \"loader\",\n        animation: \"border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 22\n      }, this) : createQuestions()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: handleClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), setButton()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Questions, \"PFYYqcZKo8CcZUN6hbf65mxHQyg=\", false, function () {\n  return [useQuery];\n});\n\n_c = Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useQuery","FIND_QUESTIONS","he","app","Modal","Button","Spinner","ListGroup","Questions","props","play","setPlay","category","setShowLastGame","questionCounter","setQuestionCounter","questionArray","setQuestionArray","numberOfQuestions","asserts","setAsserts","refAsserts","fails","setFails","refFails","answerArray","startTime","setStartTime","Date","counting","setCounting","loading","data","variables","query","_partition","questions_partition","updateUser","time","game","title","current","date","timeElapsed","user","currentUser","id","functions","addNewGame","error","console","handleClose","questions","start","end","endTime","timeDiff","seconds","Math","round","randomUniqueNum","range","outputCount","arr","i","push","result","random","floor","shuffleArray","array","length","j","temp","createArrayOfQuestions","correct_answer","concat","incorrect_answers","addAnswer","question","drawQuestion","decode","displayQuestion","q","map","setNextButton","lastAnswer","pop","then","catch","alert","setButton","createQuestions","indexArray","index"],"sources":["/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Questions.js"],"sourcesContent":["import React from \"react\";\nimport useState from 'react-usestateref'\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_QUESTIONS } from '../graphql-operations';\nimport he from 'he';\nimport {\n    app\n} from \"../index\";\nimport {\n    Modal,\n    Button,\n    Spinner,\n    ListGroup\n} from \"react-bootstrap\";\n\nexport default function Questions(props) {\n\n    const { play, setPlay, category, setShowLastGame } = props;\n\n    const [questionCounter, setQuestionCounter] = React.useState(-1);\n    const [questionArray, setQuestionArray] = React.useState([]);\n    const [numberOfQuestions] = React.useState(10); // TODO: De momento es un valor fijo, pero podrÃ­a ser variable como en iOS\n    var [asserts, setAsserts, refAsserts] = useState(0)\n    var [fails, setFails, refFails] = useState(0)\n    var answerArray = [];\n    const [startTime, setStartTime] = React.useState(new Date());\n    const [counting, setCounting] = React.useState(false);\n\n\n    // Get Stock via GraphQL and update 'stock' value\n    const { loading, data } = useQuery(FIND_QUESTIONS, {\n        variables: { query: { _partition: category.questions_partition } },\n    });\n\n    const updateUser = async (time) => {\n        try {\n            const game = {\n                category: category.title,\n                asserts: refAsserts.current,\n                fails: refFails.current,\n                date: new Date(),\n                timeElapsed: time\n            }\n            const user = app.currentUser;\n            if (user.id === app.currentUser.id) {\n                await app.currentUser.functions.addNewGame(game);\n            }\n            // await updateUserGame({\n            //     variables: {\n            //         query: {_id: app.currentUser.id},\n            //         set: { games: game }\n            //     }\n            // });\n        } catch (error) {\n            console.error(\"Issue uppdating user game:\", error);\n        }\n    }\n\n    const handleClose = (() => {\n        setQuestionArray([])\n        setPlay(false)\n    });\n    const questions = data ? data.questions : null;\n\n    function start() {\n        setStartTime(new Date())\n    };\n\n    function end() {\n        const endTime = new Date();\n        var timeDiff = endTime - startTime; //in ms\n        // strip the ms\n        timeDiff /= 1000;\n\n        // get seconds \n        var seconds = Math.round(timeDiff);\n        return seconds;\n    }\n\n    function randomUniqueNum(range, outputCount) {\n        let arr = []\n        for (let i = 1; i <= range; i++) {\n            arr.push(i)\n        }\n\n        let result = [];\n\n        for (let i = 1; i <= outputCount; i++) {\n            const random = Math.floor(Math.random() * (range - i));\n            result.push(arr[random]);\n            arr[random] = arr[range - i];\n        }\n\n        return result;\n    }\n\n\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            // Generate random number \n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n\n    function createArrayOfQuestions() {\n        let array = []\n        array.push(questionArray[questionCounter].correct_answer);\n        array = array.concat(questionArray[questionCounter].incorrect_answers);\n        shuffleArray(array)\n        return array\n    }\n\n    function addAnswer(question) {\n        answerArray.push(question);\n    }\n\n    function drawQuestion(question) {\n        return (\n            <ListGroup.Item\n                as=\"li\"\n                key={question}\n                eventKey={question}\n                action onClick={() => addAnswer(question)}>\n                {he.decode(question)}\n            </ListGroup.Item>)\n    }\n\n    function displayQuestion() {\n        const q = createArrayOfQuestions()\n        if (!counting) {\n            setCounting(true);\n            start();\n        }\n        return (\n            <div>\n                <span>{he.decode(questionArray[questionCounter].question)}</span>\n                <ListGroup variant=\"flush\" as=\"ul\">\n                    {q && q.map((question) => {\n                        return drawQuestion(question)\n                    })}\n                </ListGroup>\n            </div>\n        )\n    }\n\n    function setNextButton() {\n        const lastAnswer = answerArray.pop()\n        if (lastAnswer === questionArray[questionCounter].correct_answer) {\n            setAsserts(asserts => asserts + 1)\n        } else {\n            setFails(fails => fails + 1)\n        }\n        if (questionCounter < numberOfQuestions - 1) {\n            setQuestionCounter(\n                questionCounter < numberOfQuestions ? questionCounter + 1 : 0\n            )\n        } else {\n            const time = end();\n            updateUser(time).then(() => {\n                handleClose();\n                setShowLastGame(true);\n            }).catch(() => {\n                alert(\"An error occured\");\n                handleClose();\n            });\n        }\n    }\n\n    function setButton() {\n        if (questionCounter === -1) {\n            return (\n                <Button\n                    variant=\"success\"\n                    onClick={() => setQuestionCounter(questionCounter + 1)}>\n                    START!\n                </Button>)\n        } else {\n            return (\n                <Button\n                    variant=\"info\"\n                    onClick={() => setNextButton()}>\n                    Next {numberOfQuestions - questionCounter}\n                </Button>)\n        }\n\n    }\n\n    function createQuestions() {\n        if (!questionArray.length) {\n            const indexArray = randomUniqueNum(questions.length - 1, numberOfQuestions);\n            for (var index in indexArray) {\n                questionArray.push(questions[indexArray[index]])\n            }\n        } else {\n            return displayQuestion()\n        }\n    }\n\n    return (\n        <Modal show={play} onHide={handleClose} backdrop=\"static\">\n            <Modal.Header closeButton>\n                <Modal.Title>{category.title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {loading ?\n                    (<Spinner className=\"loader\" animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>) :\n                    (createQuestions())}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n              </Button>\n                {setButton()}\n            </Modal.Footer>\n        </Modal>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}