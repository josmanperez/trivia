[{"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/index.js":"1","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/App.js":"2","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/LoginFields.js":"3","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Categories.js":"4","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/graphql-operations.js":"5","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Questions.js":"6","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/GameStats.js":"7","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Ranking.js":"8"},{"size":1987,"mtime":1663855076535,"results":"9","hashOfConfig":"10"},{"size":1939,"mtime":1663860166414,"results":"11","hashOfConfig":"10"},{"size":3554,"mtime":1663852054690,"results":"12","hashOfConfig":"10"},{"size":1470,"mtime":1663852488106,"results":"13","hashOfConfig":"10"},{"size":850,"mtime":1663860153554,"results":"14","hashOfConfig":"10"},{"size":6670,"mtime":1663860354939,"results":"15","hashOfConfig":"10"},{"size":4385,"mtime":1663858354477,"results":"16","hashOfConfig":"10"},{"size":2355,"mtime":1663859973106,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"la45xp",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/index.js",[],[],[],"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/App.js",[],[],"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/LoginFields.js",[],[],"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Categories.js",["46","47"],[],"import * as React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_CATEGORIES } from \"../graphql-operations\";\nimport {\n  Card,\n  Container,\n  Spinner,\n  Button\n} from 'react-bootstrap';\n\nexport default function Category(props) {\n\n  const { play, setPlay } = props;\n  const { category, setCategory } = props;\n\n  // Get Categories via GraphQL\n  const { loading, data } = useQuery(FIND_CATEGORIES);\n  const categories = data ? data.categories : null;\n\n  function playGame(e) {\n    setCategory(\n      e\n    )\n    setPlay(\n      true\n    )\n  }\n\n  function renderCategories(category) {\n    return (\n      <Card key={category.title} className=\"category\" style={{ marginTop: '1rem' }}>\n        <div className=\"card-horizontal\">\n          <Card.Body>\n            <Card.Title >{category.title}</Card.Title>\n          </Card.Body>\n        </div>\n        <Card.Footer>\n          <Button\n            onClick={() => playGame(category)}\n            style={{ float: 'right' }}\n            variant=\"info\">Play\n          </Button>\n        </Card.Footer>\n      </Card>\n    )\n  }\n\n  return (\n    <Container>\n      {loading ? (<Spinner className=\"loader\" animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>) : (\n        <Container variant=\"flush\">\n          {categories && categories.map((category) => {\n            return renderCategories(category);\n          })}\n        </Container>\n      )}\n    </Container>\n  )\n\n}","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/graphql-operations.js",[],[],"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Questions.js",["48","49"],[],"import React from \"react\";\nimport useState from 'react-usestateref'\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_QUESTIONS } from '../graphql-operations';\nimport he from 'he';\nimport {\n    app\n} from \"../index\";\nimport {\n    Modal,\n    Button,\n    Spinner,\n    ListGroup\n} from \"react-bootstrap\";\n\nexport default function Questions(props) {\n\n    const { play, setPlay, category, setShowLastGame } = props;\n\n    const [questionCounter, setQuestionCounter] = React.useState(-1);\n    const [questionArray, setQuestionArray] = React.useState([]);\n    const [numberOfQuestions] = React.useState(10); // TODO: De momento es un valor fijo, pero podrÃ­a ser variable como en iOS\n    var [asserts, setAsserts, refAsserts] = useState(0)\n    var [fails, setFails, refFails] = useState(0)\n    var answerArray = [];\n    const [startTime, setStartTime] = React.useState(new Date());\n    const [counting, setCounting] = React.useState(false);\n\n\n    // Get Stock via GraphQL and update 'stock' value\n    const { loading, data } = useQuery(FIND_QUESTIONS, {\n        variables: { query: { _partition: category.questions_partition } },\n    });\n\n    const updateUser = async (time) => {\n        try {\n            const game = {\n                category: category.title,\n                asserts: refAsserts.current,\n                fails: refFails.current,\n                date: new Date(),\n                timeElapsed: time\n            }\n            const user = app.currentUser;\n            if (user.id === app.currentUser.id) {\n                await app.currentUser.functions.addNewGame(game);\n            }\n            // await updateUserGame({\n            //     variables: {\n            //         query: {_id: app.currentUser.id},\n            //         set: { games: game }\n            //     }\n            // });\n        } catch (error) {\n            console.error(\"Issue uppdating user game:\", error);\n        }\n    }\n\n    const handleClose = (() => {\n        setQuestionArray([])\n        setPlay(false)\n    });\n    const questions = data ? data.questions : null;\n\n    function start() {\n        setStartTime(new Date())\n    };\n\n    function end() {\n        const endTime = new Date();\n        var timeDiff = endTime - startTime; //in ms\n        // strip the ms\n        timeDiff /= 1000;\n\n        // get seconds \n        var seconds = Math.round(timeDiff);\n        return seconds;\n    }\n\n    function randomUniqueNum(range, outputCount) {\n        let arr = []\n        for (let i = 1; i <= range; i++) {\n            arr.push(i)\n        }\n\n        let result = [];\n\n        for (let i = 1; i <= outputCount; i++) {\n            const random = Math.floor(Math.random() * (range - i));\n            result.push(arr[random]);\n            arr[random] = arr[range - i];\n        }\n\n        return result;\n    }\n\n\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            // Generate random number \n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n\n    function createArrayOfQuestions() {\n        let array = []\n        array.push(questionArray[questionCounter].correct_answer);\n        array = array.concat(questionArray[questionCounter].incorrect_answers);\n        shuffleArray(array)\n        return array\n    }\n\n    function addAnswer(question) {\n        answerArray.push(question);\n    }\n\n    function drawQuestion(question) {\n        return (\n            <ListGroup.Item\n                as=\"li\"\n                key={question}\n                eventKey={question}\n                action onClick={() => addAnswer(question)}>\n                {he.decode(question)}\n            </ListGroup.Item>)\n    }\n\n    function displayQuestion() {\n        const q = createArrayOfQuestions()\n        if (!counting) {\n            setCounting(true);\n            start();\n        }\n        return (\n            <div>\n                <span>{he.decode(questionArray[questionCounter].question)}</span>\n                <ListGroup variant=\"flush\" as=\"ul\">\n                    {q && q.map((question) => {\n                        return drawQuestion(question)\n                    })}\n                </ListGroup>\n            </div>\n        )\n    }\n\n    function setNextButton() {\n        const lastAnswer = answerArray.pop()\n        if (lastAnswer === questionArray[questionCounter].correct_answer) {\n            setAsserts(asserts => asserts + 1)\n        } else {\n            setFails(fails => fails + 1)\n        }\n        if (questionCounter < numberOfQuestions - 1) {\n            setQuestionCounter(\n                questionCounter < numberOfQuestions ? questionCounter + 1 : 0\n            )\n        } else {\n            const time = end();\n            updateUser(time).then(() => {\n                handleClose();\n                setShowLastGame(true);\n            }).catch(() => {\n                alert(\"An error occured\");\n                handleClose();\n            });\n        }\n    }\n\n    function setButton() {\n        if (questionCounter === -1) {\n            return (\n                <Button\n                    variant=\"success\"\n                    onClick={() => setQuestionCounter(questionCounter + 1)}>\n                    START!\n                </Button>)\n        } else {\n            return (\n                <Button\n                    variant=\"info\"\n                    onClick={() => setNextButton()}>\n                    Next {numberOfQuestions - questionCounter}\n                </Button>)\n        }\n\n    }\n\n    function createQuestions() {\n        if (!questionArray.length) {\n            const indexArray = randomUniqueNum(questions.length - 1, numberOfQuestions);\n            for (var index in indexArray) {\n                questionArray.push(questions[indexArray[index]])\n            }\n        } else {\n            return displayQuestion()\n        }\n    }\n\n    return (\n        <Modal show={play} onHide={handleClose} backdrop=\"static\">\n            <Modal.Header closeButton>\n                <Modal.Title>{category.title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {loading ?\n                    (<Spinner className=\"loader\" animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>) :\n                    (createQuestions())}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n              </Button>\n                {setButton()}\n            </Modal.Footer>\n        </Modal>\n    );\n}","/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/GameStats.js",[],[],"/Users/josman.perez/Documents/Development/Web/trivia-flexible/src/components/Ranking.js",["50"],[],"import * as React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_RANKING } from \"../graphql-operations\";\nimport {\n  Button,\n  Col,\n  Container,\n  ListGroup,\n  Modal,\n  Row,\n  Spinner\n} from 'react-bootstrap';\nimport { client } from \"..\";\n\nexport default function Ranking(props) {\n\n  const { loading, data } = useQuery(FIND_RANKING);\n  const ranking = data ? data.RankingSorted : null;\n\n  const { show, setShow } = props;\n\n  const handleClose = () => {\n    client.clearStore();\n    setShow(false);\n  }\n\n  function drawRanking(ranking, position) {\n    return (\n      <ListGroup.Item\n        className=\"ranking\"\n        as=\"li\"\n        key={ranking._id}>\n        <Container>\n          <Row>\n            <Col sm=\"8\" className=\"ranking-col\">\n              <Row>\n                <Col style={{ fontSize: \"1.5rem\" }}>{ranking.user.email}</Col>\n              </Row>\n              <Row className=\"ranking-stats\">\n                <Col>Win Rate</Col>\n                <Col>Total Time</Col>\n                <Col>Total Games</Col>\n              </Row>\n              <Row className=\"ranking-stats\">\n                <Col>{ranking.winRate == 0 ? ranking.winRate : ranking.winRate.toFixed(2)}</Col>\n                <Col>{new Date(ranking.totalTime * 1000).toISOString().substr(11, 8)}</Col>\n                <Col>{ranking.totalGames}</Col>\n              </Row>\n            </Col>\n            <Col sm=\"4\" className=\"d-flex align-items-center justify-content-center ranking-position numberCircle\">{position + 1}</Col>\n          </Row>\n        </Container>\n      </ListGroup.Item>\n    )\n\n  }\n\n  return (\n    <Modal size=\"lg\" show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Trivia Ranking</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {loading ?\n          (<Spinner\n            className=\"loader\"\n            animation=\"border\"\n            role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>) :\n          (<ListGroup\n            as=\"ul\">\n            {ranking && ranking.map((user, index) => {\n              return drawRanking(user, index)\n            })}\n          </ListGroup>)}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\n\n",{"ruleId":"51","severity":1,"message":"52","line":13,"column":11,"nodeType":"53","messageId":"54","endLine":13,"endColumn":15},{"ruleId":"51","severity":1,"message":"55","line":14,"column":11,"nodeType":"53","messageId":"54","endLine":14,"endColumn":19},{"ruleId":"51","severity":1,"message":"56","line":23,"column":10,"nodeType":"53","messageId":"54","endLine":23,"endColumn":17},{"ruleId":"51","severity":1,"message":"57","line":24,"column":10,"nodeType":"53","messageId":"54","endLine":24,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":45,"column":39,"nodeType":"60","messageId":"61","endLine":45,"endColumn":41},"no-unused-vars","'play' is assigned a value but never used.","Identifier","unusedVar","'category' is assigned a value but never used.","'asserts' is assigned a value but never used.","'fails' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]